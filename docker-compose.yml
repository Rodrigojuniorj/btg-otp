version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: btg-otp
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV}
      DB_HOST: btg-postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: btg_db
      DB_SCHEMA: public
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      PORT: ${PORT}
      DOCUMENTATION_PREFIX: ${DOCUMENTATION_PREFIX}
      OTP_LENGTH: ${OTP_LENGTH}
      OTP_MINUTE_DURATION: ${OTP_MINUTE_DURATION}
      JWT_OTP_SECRET: ${JWT_OTP_SECRET}
      REDIS_HOST: btg-redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      REDIS_PASSWORD: btg_redis_password
      SMTP_HOST: ${SMTP_HOST}
      PORT_EMAIL: ${PORT_EMAIL}
      SECURE_EMAIL: ${SECURE_EMAIL}
      USER_EMAIL: ${USER_EMAIL}
      BBC_EMAIL: ${BBC_EMAIL}
      PASS_EMAIL: ${PASS_EMAIL}
      SERVER_URL: ${SERVER_URL}
      OTP_MAX_ATTEMPTS: ${OTP_MAX_ATTEMPTS}
    ports:
      - '3333:3333'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - btg-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --no-verbose --tries=1 --spider http://localhost:3333/api/v1/btg/health || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  postgres:
    image: postgres:15-alpine
    container_name: btg-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: btg_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - btg-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d btg_db']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    container_name: btg-redis
    image: redis
    ports:
      - 6379:6379
    environment:
      REDIS_PASSWORD: btg_redis_password
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - btg-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  btg-network:
    driver: bridge
